import React from 'react';
import { X, Download, Edit, Trash2 } from 'lucide-react';
import ActionModal from './ActionModal';
import Button from './Button';

interface ViewDetailsModalProps {
  isOpen: boolean;
  onClose: () => void;
  onEdit?: () => void;
  onDelete?: () => void;
  onExport?: () => void;
  title: string;
  data: Record<string, any>;
  type: 'student' | 'teacher' | 'institution' | 'report' | 'payment';
  showActions?: boolean;
}

export default function ViewDetailsModal({
  isOpen,
  onClose,
  onEdit,
  onDelete,
  onExport,
  title,
  data,
  type,
  showActions = true
}: ViewDetailsModalProps) {
  // Format the data based on the type
  const formatData = () => {
    switch (type) {
      case 'student':
        return [
          { label: 'Name', value: data.name },
          { label: 'Email', value: data.email },
          { label: 'Phone', value: data.phone },
          { label: 'Grade', value: data.grade },
          { label: 'Institution', value: data.institution },
          { label: 'Guardian Name', value: data.guardianName },
          { label: 'Guardian Contact', value: data.guardianContact },
          { label: 'Date of Birth', value: data.dateOfBirth },
          { label: 'Address', value: data.address }
        ];
      case 'teacher':
        return [
          { label: 'Name', value: data.name },
          { label: 'Email', value: data.email },
          { label: 'Phone', value: data.phone },
          { label: 'Department', value: data.department },
          { label: 'Institution', value: data.institution },
          { label: 'Qualification', value: data.qualification },
          { label: 'Join Date', value: data.joinDate }
        ];
      case 'institution':
        return [
          { label: 'Name', value: data.name },
          { label: 'Type', value: data.type },
          { label: 'Address', value: data.address },
          { label: 'Contact Person', value: data.contactPerson },
          { label: 'Contact Email', value: data.contactEmail },
          { label: 'Contact Phone', value: data.contactPhone },
          { label: 'Subscription Plan', value: data.subscriptionPlan },
          { label: 'Students Count', value: data.studentsCount },
          { label: 'Teachers Count', value: data.teachersCount }
        ];
      case 'report':
        return [
          { label: 'Title', value: data.title },
          { label: 'Type', value: data.type },
          { label: 'Institution', value: data.institution },
          { label: 'Generated On', value: data.generatedOn },
          { label: 'Generated By', value: data.generatedBy },
          { label: 'Format', value: data.format },
          { label: 'Size', value: data.size }
        ];
      case 'payment':
        return [
          { label: 'Transaction ID', value: data.transactionId },
          { label: 'Amount', value: `$${data.amount.toFixed(2)}` },
          { label: 'Date', value: data.date },
          { label: 'Status', value: data.status },
          { label: 'Payment Method', value: data.paymentMethod },
          { label: 'Institution', value: data.institution },
          { label: 'Invoice Number', value: data.invoiceNumber }
        ];
      default:
        return Object.entries(data).map(([key, value]) => ({
          label: key.charAt(0).toUpperCase() + key.slice(1).replace(/([A-Z])/g, ' $1'),
          value: value
        }));
    }
  };

  const renderFooter = () => {
    if (!showActions) return null;
    
    return (
      <div className="flex justify-between">
        <div>
          {onDelete && (
            <Button 
              variant="danger" 
              onClick={onDelete}
              icon={<Trash2 className="h-4 w-4" />}
              size="sm"
            >
              Delete
            </Button>
          )}
        </div>
        <div className="flex space-x-3">
          {onExport && (
            <Button 
              variant="outline" 
              onClick={onExport}
              icon={<Download className="h-4 w-4" />}
              size="sm"
            >
              Export
            </Button>
          )}
          {onEdit && (
            <Button 
              variant="primary" 
              onClick={onEdit}
              icon={<Edit className="h-4 w-4" />}
              size="sm"
            >
              Edit
            </Button>
          )}
        </div>
      </div>
    );
  };

  return (
    <ActionModal
      isOpen={isOpen}
      onClose={onClose}
      title={title}
      footer={renderFooter()}
      size="md"
    >
      <div className="space-y-6">
        <div className="bg-gray-50 dark:bg-gray-800 rounded-lg p-4">
          <dl className="divide-y divide-gray-200 dark:divide-gray-700">
            {formatData().map((item, index) => (
              <div key={index} className="py-3 sm:grid sm:grid-cols-3 sm:gap-4">
                <dt className="text-sm font-medium text-gray-500 dark:text-gray-400">{item.label}</dt>
                <dd className="mt-1 text-sm text-gray-900 dark:text-white sm:col-span-2 sm:mt-0">
                  {typeof item.value === 'boolean' 
                    ? (item.value ? 'Yes' : 'No')
                    : (item.value || 'N/A')}
                </dd>
              </div>
            ))}
          </dl>
        </div>
      </div>
    </ActionModal>
  );
}
        